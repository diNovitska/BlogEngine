<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="MyFirstSteps" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="FullName" elementType="Argument">
            <stringProp name="Argument.name">FullName</stringProp>
            <stringProp name="Argument.value">ACORN ENERGY INC,AG GROWTH INTERNATIONAL INC,BANK FIRST NATIONAL CORPORATION (WI)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group loop for in request1" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.jmeter.config.Argument;
import org.apache.jmeter.config.Arguments;
import java.net.URLEncoder;
import java.net.URLDecoder;

String assertionActivateString=vars.get(&quot;AssertionActivate&quot;);
String exceptionMessage=vars.get(&quot;AssertionExceptionMessage&quot;);


if (assertionActivateString!=null)
{
	if (assertionActivateString.equals(&quot;true&quot;))
	{		
		String message=&quot;WARNING: &quot;+exceptionMessage;
		AssertionResult.setFailure(true);
		AssertionResult.setFailureMessage(message);		
		vars.put(&quot;AssertionActivate&quot;,&quot;false&quot;);		
	}

}
else
{
	vars.put(&quot;AssertionActivate&quot;,&quot;false&quot;);	
}</stringProp>
        </JSR223Assertion>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Request_1" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">rtrtr</stringProp>
          <stringProp name="RESPONSE_DATA">{&quot;data&quot;:[{&quot;securityId&quot;:164864,&quot;fullName&quot;:&quot;ACORN ENERGY INC&quot;,&quot;shortName&quot;:&quot;ACFN&quot;},{&quot;securityId&quot;:219813,&quot;fullName&quot;:&quot;AFFINITY NETWORKS INC&quot;,&quot;shortName&quot;:&quot;AFFN&quot;},{&quot;securityId&quot;:2102,&quot;fullName&quot;:&quot;AG GROWTH INTERNATIONAL INC&quot;,&quot;shortName&quot;:&quot;AFN&quot;},{&quot;securityId&quot;:2639622,&quot;fullName&quot;:&quot;AH MTG ADV TR 2011-1 VFNTS&quot;,&quot;shortName&quot;:&quot;AHMAT&quot;},{&quot;securityId&quot;:2639953,&quot;fullName&quot;:&quot;ALESCO PREF FDG XI 2006-11 A-1B FN 144A&quot;,&quot;shortName&quot;:&quot;ALESC&quot;},{&quot;securityId&quot;:2575276,&quot;fullName&quot;:&quot;BABCOCK&amp; BROWN AIR FNDG 2007-1 G-1&quot;,&quot;shortName&quot;:&quot;BBAIR&quot;},{&quot;securityId&quot;:55574,&quot;fullName&quot;:&quot;BANK FIRST NATIONAL CORPORATION (WI)&quot;,&quot;shortName&quot;:&quot;BFNC&quot;},{&quot;securityId&quot;:48652,&quot;fullName&quot;:&quot;CCFNB BANCORP INC&quot;,&quot;shortName&quot;:&quot;CCFN&quot;},{&quot;securityId&quot;:120008,&quot;fullName&quot;:&quot;CAPITOL FEDERAL FINANCIAL INC&quot;,&quot;shortName&quot;:&quot;CFFN&quot;},{&quot;securityId&quot;:2137463,&quot;fullName&quot;:&quot;CM FINANCE INC COM&quot;,&quot;shortName&quot;:&quot;CMFN&quot;},{&quot;securityId&quot;:172459,&quot;fullName&quot;:&quot;CLAYMORE EXCHANGE TRD FD TR GUGGEN DEFN EQTY&quot;,&quot;shortName&quot;:&quot;DEF&quot;},{&quot;securityId&quot;:17176,&quot;fullName&quot;:&quot;DIFFUSION PHARMACEUTICALS INC&quot;,&quot;shortName&quot;:&quot;DFFN&quot;},{&quot;securityId&quot;:6665264,&quot;fullName&quot;:&quot;REALITY SHS ETF TR DIVCN DIVD ETF&quot;,&quot;shortName&quot;:&quot;DFND&quot;},{&quot;securityId&quot;:145702,&quot;fullName&quot;:&quot;DUFRY AG&quot;,&quot;shortName&quot;:&quot;DUFN&quot;},{&quot;securityId&quot;:69170,&quot;fullName&quot;:&quot;EFUEL EFN CORPORATION&quot;,&quot;shortName&quot;:&quot;EFLN&quot;},{&quot;securityId&quot;:2218014,&quot;fullName&quot;:&quot;ELEMENT FLEET MANAGEMENT CORP 5125% SUB CONV PIDI UNSEC DEB 30/06/2019 CAD (144&quot;,&quot;shortName&quot;:&quot;EFNCN&quot;},{&quot;securityId&quot;:1723666,&quot;fullName&quot;:&quot;ISHARES TR MSCI FINLAND CAPPED ETF&quot;,&quot;shortName&quot;:&quot;EFNL&quot;},{&quot;securityId&quot;:53425,&quot;fullName&quot;:&quot;ELFUN TRUSTS UNIT CTF&quot;,&quot;shortName&quot;:&quot;ELFNX&quot;},{&quot;securityId&quot;:18208,&quot;fullName&quot;:&quot;EQUITABLE FINANCIAL CORP&quot;,&quot;shortName&quot;:&quot;EQFN&quot;},{&quot;securityId&quot;:1092807,&quot;fullName&quot;:&quot;ISHARES MSCI EUROPE FINANACIALS ETF&quot;,&quot;shortName&quot;:&quot;EUFN&quot;}],&quot;totalCount&quot;:228298}</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename">C:/Users/Andrii_Tarnovetskyi/Downloads/Microsoft.SkypeApp_kzf8qxf38zg5c!App/All/Validation.txt</stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script"></stringProp>
          </JSR223Assertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.*;
import groovy.json.internal.*;
Boolean requestSucceeded=false;
String assertionExceptionMessage = &quot;&quot;;



String[] arr = vars.get(&quot;FullName&quot;).split(&quot;,&quot;);

def emptyMap = [:];
def emptyMap1 = [:];
def jsonSlurper = new JsonSlurper();
def response = jsonSlurper.parseText(prev.getResponseDataAsString());
def getApplicationById = {fullName -&gt; response.data.find{fullName == it.fullName}};



try{
	if(response.data.isEmpty()){
		throw e;
		}
	}catch(Exception e){
		requestSucceeded=true;
		assertionExceptionMessage =  assertionExceptionMessage +  &quot;Array is empty&quot;; 	
		}



for(int i=0; i &lt;= arr.length-1;i++){
	try{
		if( arr[i] == null){
			throw e;
		}
		if( arr[i].isEmpty()){
			throw e;
		}
			}	
		catch(Exception e){
		requestSucceeded=true;
		assertionExceptionMessage =  assertionExceptionMessage +  &quot;Your variable is empty &quot;; 	
		}	
	try{
		if(response.data.fullName[0] != null &amp;&amp; response.data.securityId[0] != null){
			emptyMap.put(arr[i],getApplicationById(arr[i]).securityId);	
			emptyMap1.put(arr[i],getApplicationById(arr[i]).securityId);	
			def json3 = new JsonBuilder(emptyMap1);	
			emptyMap1 = [:];
			vars.put(&quot;firstName&quot; + i,json3.toPrettyString());
		}else{
			throw NullPointerException;
			}
		}catch(NullPointerException ){
			requestSucceeded=true;
			assertionExceptionMessage =  assertionExceptionMessage + &quot;JSON doesn`t have this element &quot;; 	
			}	

		
}

try{
	def json2 = new JsonBuilder(emptyMap);	
	if( !(json2 instanceof JsonBuilder) ){
				throw e;
				}
	vars.put(&quot;firstName&quot;, json2.toPrettyString());	
			}catch(Exception e){
				requestSucceeded=true;
				assertionExceptionMessage = assertionExceptionMessage + &quot;Your object is not converted to JSON object&quot;; 	
				}
		
	
if(requestSucceeded)
{
//	log.error(assertionExceptionMessage);
	vars.put(&quot;AssertionActivate&quot;, &quot;true&quot;);
	vars.put(&quot;AssertionExceptionMessage&quot;, assertionExceptionMessage);
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.*;
import groovy.json.internal.*;


String[] arr = vars.get(&quot;FullName&quot;).split(&quot;,&quot;);
if(arr == null){
	println &quot;slda;&quot;;
	}
Boolean requestSucceeded=false;
String assertionExceptionMessage = &quot;&quot;;
def emptyMap = [:];

for(int i=0; i &lt; arr.length-1 ;i++){
	
	try{
		if( arr[i] == null){
			throw e;
		}
		if( arr[i].isEmpty()){
			throw e;
		}
			}	
		catch(Exception e){
		requestSucceeded=true;
		assertionExceptionMessage =  assertionExceptionMessage +  &quot;Your variable is empty &quot;; 		
		}


	def jsonSlurper = new JsonSlurper();
	def response = jsonSlurper.parseText(prev.getResponseDataAsString());
	def getApplicationById = {fullName -&gt; response.data.find{fullName == it.fullName}};

	try{
		if(response.data.isEmpty()){
			throw e;
			}
	
		try{
			if(response.data.fullName[0] == null){
				throw e;
			}
			if(response.data.securityId[0] == null){
				throw e;
				}
			Object getText = getApplicationById(arr[i]);
			emptyMap.put(arr[i],getText.securityId);	
			}catch(Exception e){
				requestSucceeded=true;
				assertionExceptionMessage =  assertionExceptionMessage + &quot;JSON doesn`t have this element &quot;; 	
				}	
		}catch(Exception e){
			requestSucceeded=true;
			assertionExceptionMessage =  assertionExceptionMessage +  &quot;Array is empty&quot;; 	
			}
	

}

try{
	def json2 = new JsonBuilder(emptyMap);
	vars.put(&quot;firstName&quot;, json2.toPrettyString());	
	if( !(json2 instanceof JsonBuilder) ){
				throw e;
				}
			}catch(Exception e){
				requestSucceeded=true;
				assertionExceptionMessage = assertionExceptionMessage + &quot;Your object is not converted to JSON object&quot;; 	
				}
		
	
if(requestSucceeded)
{
//	log.error(assertionExceptionMessage);
	vars.put(&quot;AssertionActivate&quot;, &quot;true&quot;);
	vars.put(&quot;AssertionExceptionMessage&quot;, assertionExceptionMessage);
}</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="488265027">MyFirstSteps</stringProp>
            <stringProp name="-1948168983">Thread Group</stringProp>
            <stringProp name="977251795">Test Fragment1</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Test Fragment1" enabled="true"/>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">${firstName1}</stringProp>
            <stringProp name="RESPONSE_DATA">${firstName}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion for code of responce" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename">C:/Users/Andrii_Tarnovetskyi/Downloads/Microsoft.SkypeApp_kzf8qxf38zg5c!App/All/Validation.txt</stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">${firstName0}</stringProp>
            <stringProp name="RESPONSE_DATA">${firstName}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion for code of responce" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename">C:/Users/Andrii_Tarnovetskyi/Downloads/Microsoft.SkypeApp_kzf8qxf38zg5c!App/All/Validation.txt</stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">${firstName2}</stringProp>
            <stringProp name="RESPONSE_DATA">${firstName}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion for code of responce" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename">C:/Users/Andrii_Tarnovetskyi/Downloads/Microsoft.SkypeApp_kzf8qxf38zg5c!App/All/Validation.txt</stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group parametrized" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="jp@gc - Parameterized Controller" enabled="true">
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="FullName1" elementType="Argument">
                <stringProp name="Argument.name">FullName1</stringProp>
                <stringProp name="Argument.value">ACORN ENERGY INC</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </kg.apc.jmeter.control.ParameterizedController>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller2388" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="488265027">MyFirstSteps</stringProp>
              <stringProp name="1777972829">Thread Group parametrized</stringProp>
              <stringProp name="170071582">Test Fragment</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">${firstName}</stringProp>
            <stringProp name="RESPONSE_DATA">${firstName}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion for code of responce" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename">C:/Users/Andrii_Tarnovetskyi/Downloads/Microsoft.SkypeApp_kzf8qxf38zg5c!App/All/Validation.txt</stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="jp@gc - Parameterized Controller2" enabled="true">
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="FullName1" elementType="Argument">
                <stringProp name="Argument.name">FullName1</stringProp>
                <stringProp name="Argument.value">AG GROWTH INTERNATIONAL INC</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </kg.apc.jmeter.control.ParameterizedController>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller2388" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="488265027">MyFirstSteps</stringProp>
              <stringProp name="1777972829">Thread Group parametrized</stringProp>
              <stringProp name="170071582">Test Fragment</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">${firstName}</stringProp>
            <stringProp name="RESPONSE_DATA">${firstName}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion for code of responce" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename">C:/Users/Andrii_Tarnovetskyi/Downloads/Microsoft.SkypeApp_kzf8qxf38zg5c!App/All/Validation.txt</stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="jp@gc - Parameterized Controller3" enabled="true">
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="FullName1" elementType="Argument">
                <stringProp name="Argument.name">FullName1</stringProp>
                <stringProp name="Argument.value">BANK FIRST NATIONAL CORPORATION (WI)</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </kg.apc.jmeter.control.ParameterizedController>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller2388" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="488265027">MyFirstSteps</stringProp>
              <stringProp name="1777972829">Thread Group parametrized</stringProp>
              <stringProp name="170071582">Test Fragment</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">${firstName}</stringProp>
            <stringProp name="RESPONSE_DATA">${firstName}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion for code of responce" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename">C:/Users/Andrii_Tarnovetskyi/Downloads/Microsoft.SkypeApp_kzf8qxf38zg5c!App/All/Validation.txt</stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Test Fragment" enabled="false"/>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Request_1" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">rtrtr</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;data&quot;:[{&quot;securityId&quot;:164864,&quot;fullName&quot;:&quot;ACORN ENERGY INC&quot;,&quot;shortName&quot;:&quot;ACFN&quot;},{&quot;securityId&quot;:219813,&quot;fullName&quot;:&quot;AFFINITY NETWORKS INC&quot;,&quot;shortName&quot;:&quot;AFFN&quot;},{&quot;securityId&quot;:2102,&quot;fullName&quot;:&quot;AG GROWTH INTERNATIONAL INC&quot;,&quot;shortName&quot;:&quot;AFN&quot;},{&quot;securityId&quot;:2639622,&quot;fullName&quot;:&quot;AH MTG ADV TR 2011-1 VFNTS&quot;,&quot;shortName&quot;:&quot;AHMAT&quot;},{&quot;securityId&quot;:2639953,&quot;fullName&quot;:&quot;ALESCO PREF FDG XI 2006-11 A-1B FN 144A&quot;,&quot;shortName&quot;:&quot;ALESC&quot;},{&quot;securityId&quot;:2575276,&quot;fullName&quot;:&quot;BABCOCK&amp; BROWN AIR FNDG 2007-1 G-1&quot;,&quot;shortName&quot;:&quot;BBAIR&quot;},{&quot;securityId&quot;:55574,&quot;fullName&quot;:&quot;BANK FIRST NATIONAL CORPORATION (WI)&quot;,&quot;shortName&quot;:&quot;BFNC&quot;},{&quot;securityId&quot;:48652,&quot;fullName&quot;:&quot;CCFNB BANCORP INC&quot;,&quot;shortName&quot;:&quot;CCFN&quot;},{&quot;securityId&quot;:120008,&quot;fullName&quot;:&quot;CAPITOL FEDERAL FINANCIAL INC&quot;,&quot;shortName&quot;:&quot;CFFN&quot;},{&quot;securityId&quot;:2137463,&quot;fullName&quot;:&quot;CM FINANCE INC COM&quot;,&quot;shortName&quot;:&quot;CMFN&quot;},{&quot;securityId&quot;:172459,&quot;fullName&quot;:&quot;CLAYMORE EXCHANGE TRD FD TR GUGGEN DEFN EQTY&quot;,&quot;shortName&quot;:&quot;DEF&quot;},{&quot;securityId&quot;:17176,&quot;fullName&quot;:&quot;DIFFUSION PHARMACEUTICALS INC&quot;,&quot;shortName&quot;:&quot;DFFN&quot;},{&quot;securityId&quot;:6665264,&quot;fullName&quot;:&quot;REALITY SHS ETF TR DIVCN DIVD ETF&quot;,&quot;shortName&quot;:&quot;DFND&quot;},{&quot;securityId&quot;:145702,&quot;fullName&quot;:&quot;DUFRY AG&quot;,&quot;shortName&quot;:&quot;DUFN&quot;},{&quot;securityId&quot;:69170,&quot;fullName&quot;:&quot;EFUEL EFN CORPORATION&quot;,&quot;shortName&quot;:&quot;EFLN&quot;},{&quot;securityId&quot;:2218014,&quot;fullName&quot;:&quot;ELEMENT FLEET MANAGEMENT CORP 5125% SUB CONV PIDI UNSEC DEB 30/06/2019 CAD (144&quot;,&quot;shortName&quot;:&quot;EFNCN&quot;},{&quot;securityId&quot;:1723666,&quot;fullName&quot;:&quot;ISHARES TR MSCI FINLAND CAPPED ETF&quot;,&quot;shortName&quot;:&quot;EFNL&quot;},{&quot;securityId&quot;:53425,&quot;fullName&quot;:&quot;ELFUN TRUSTS UNIT CTF&quot;,&quot;shortName&quot;:&quot;ELFNX&quot;},{&quot;securityId&quot;:18208,&quot;fullName&quot;:&quot;EQUITABLE FINANCIAL CORP&quot;,&quot;shortName&quot;:&quot;EQFN&quot;},{&quot;securityId&quot;:1092807,&quot;fullName&quot;:&quot;ISHARES MSCI EUROPE FINANACIALS ETF&quot;,&quot;shortName&quot;:&quot;EUFN&quot;}],&quot;totalCount&quot;:228298}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename">C:/Users/Andrii_Tarnovetskyi/Downloads/Microsoft.SkypeApp_kzf8qxf38zg5c!App/All/Validation.txt</stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import groovy.json.*;
import groovy.json.internal.*;
Boolean requestSucceeded=false;
String assertionExceptionMessage = &quot;&quot;;


String arr = vars.get(&quot;FullName1&quot;);

def jsonSlurper = new JsonSlurper();
def response = jsonSlurper.parseText(prev.getResponseDataAsString());
def getApplicationById = {fullName -&gt; response.data.find{fullName == it.fullName}};



try{
	if(response.data.isEmpty()){
		throw e;
		}
	}catch(Exception e){
		requestSucceeded=true;
		assertionExceptionMessage =  assertionExceptionMessage +  &quot;Array is empty&quot;; 	
		}
	try{
		if( arr == null){
			throw e;
		}
		if( arr.isEmpty()){
			throw e;
		}
			}	
		catch(Exception e){
		requestSucceeded=true;
		assertionExceptionMessage =  assertionExceptionMessage +  &quot;Your variable is empty &quot;; 	
		}	
	try{
		if(response.data.fullName[0] != null &amp;&amp; response.data.securityId[0] != null){
		}else{
			throw NullPointerException;
			}
		}catch(NullPointerException ){
			requestSucceeded=true;
			assertionExceptionMessage =  assertionExceptionMessage + &quot;JSON doesn`t have this element &quot;; 	
			}	

		

try{
	Object emptyMap = getApplicationById(arr);	
	def json2 = new JsonBuilder(emptyMap);	
	if( !(json2 instanceof JsonBuilder) ){
				throw e;
				}
	vars.put(&quot;firstName&quot;, json2.toPrettyString());	
			}catch(Exception e){
				requestSucceeded=true;
				assertionExceptionMessage = assertionExceptionMessage + &quot;Your object is not converted to JSON object&quot;; 	
				}
		
	
if(requestSucceeded)
{
//	log.error(assertionExceptionMessage);
	vars.put(&quot;AssertionActivate&quot;, &quot;true&quot;);
	vars.put(&quot;AssertionExceptionMessage&quot;, assertionExceptionMessage);
}
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.*;
import groovy.json.internal.*;


String[] arr = vars.get(&quot;FullName&quot;).split(&quot;,&quot;);
if(arr == null){
	println &quot;slda;&quot;;
	}
Boolean requestSucceeded=false;
String assertionExceptionMessage = &quot;&quot;;
def emptyMap = [:];

for(int i=0; i &lt; arr.length-1 ;i++){
	
	try{
		if( arr[i] == null){
			throw e;
		}
		if( arr[i].isEmpty()){
			throw e;
		}
			}	
		catch(Exception e){
		requestSucceeded=true;
		assertionExceptionMessage =  assertionExceptionMessage +  &quot;Your variable is empty &quot;; 		
		}


	def jsonSlurper = new JsonSlurper();
	def response = jsonSlurper.parseText(prev.getResponseDataAsString());
	def getApplicationById = {fullName -&gt; response.data.find{fullName == it.fullName}};

	try{
		if(response.data.isEmpty()){
			throw e;
			}
	
		try{
			if(response.data.fullName[0] == null){
				throw e;
			}
			if(response.data.securityId[0] == null){
				throw e;
				}
			Object getText = getApplicationById(arr[i]);
			emptyMap.put(arr[i],getText.securityId);	
			}catch(Exception e){
				requestSucceeded=true;
				assertionExceptionMessage =  assertionExceptionMessage + &quot;JSON doesn`t have this element &quot;; 	
				}	
		}catch(Exception e){
			requestSucceeded=true;
			assertionExceptionMessage =  assertionExceptionMessage +  &quot;Array is empty&quot;; 	
			}
	

}

try{
	def json2 = new JsonBuilder(emptyMap);
	vars.put(&quot;firstName&quot;, json2.toPrettyString());	
	if( !(json2 instanceof JsonBuilder) ){
				throw e;
				}
			}catch(Exception e){
				requestSucceeded=true;
				assertionExceptionMessage = assertionExceptionMessage + &quot;Your object is not converted to JSON object&quot;; 	
				}
		
	
if(requestSucceeded)
{
//	log.error(assertionExceptionMessage);
	vars.put(&quot;AssertionActivate&quot;, &quot;true&quot;);
	vars.put(&quot;AssertionExceptionMessage&quot;, assertionExceptionMessage);
}</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.jmeter.config.Argument;
import org.apache.jmeter.config.Arguments;
import java.net.URLEncoder;
import java.net.URLDecoder;

String assertionActivateString=vars.get(&quot;AssertionActivate&quot;);
String exceptionMessage=vars.get(&quot;AssertionExceptionMessage&quot;);


if (assertionActivateString!=null)
{
	if (assertionActivateString.equals(&quot;true&quot;))
	{		
		String message=&quot;WARNING: &quot;+exceptionMessage;
		AssertionResult.setFailure(true);
		AssertionResult.setFailureMessage(message);		
		vars.put(&quot;AssertionActivate&quot;,&quot;false&quot;);		
	}

}
else
{
	vars.put(&quot;AssertionActivate&quot;,&quot;false&quot;);	
}</stringProp>
        </JSR223Assertion>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group for loop" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
          <stringProp name="WhileController.condition">{FullName22}</stringProp>
        </WhileController>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Request_1" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA"></stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;data&quot;:[{&quot;securityId&quot;:164864,&quot;fullName&quot;:&quot;ACORN ENERGY INC&quot;,&quot;shortName&quot;:&quot;ACFN&quot;},{&quot;securityId&quot;:219813,&quot;fullName&quot;:&quot;AFFINITY NETWORKS INC&quot;,&quot;shortName&quot;:&quot;AFFN&quot;},{&quot;securityId&quot;:2102,&quot;fullName&quot;:&quot;AG GROWTH INTERNATIONAL INC&quot;,&quot;shortName&quot;:&quot;AFN&quot;},{&quot;securityId&quot;:2639622,&quot;fullName&quot;:&quot;AH MTG ADV TR 2011-1 VFNTS&quot;,&quot;shortName&quot;:&quot;AHMAT&quot;},{&quot;securityId&quot;:2639953,&quot;fullName&quot;:&quot;ALESCO PREF FDG XI 2006-11 A-1B FN 144A&quot;,&quot;shortName&quot;:&quot;ALESC&quot;},{&quot;securityId&quot;:2575276,&quot;fullName&quot;:&quot;BABCOCK&amp; BROWN AIR FNDG 2007-1 G-1&quot;,&quot;shortName&quot;:&quot;BBAIR&quot;},{&quot;securityId&quot;:55574,&quot;fullName&quot;:&quot;BANK FIRST NATIONAL CORPORATION (WI)&quot;,&quot;shortName&quot;:&quot;BFNC&quot;},{&quot;securityId&quot;:48652,&quot;fullName&quot;:&quot;CCFNB BANCORP INC&quot;,&quot;shortName&quot;:&quot;CCFN&quot;},{&quot;securityId&quot;:120008,&quot;fullName&quot;:&quot;CAPITOL FEDERAL FINANCIAL INC&quot;,&quot;shortName&quot;:&quot;CFFN&quot;},{&quot;securityId&quot;:2137463,&quot;fullName&quot;:&quot;CM FINANCE INC COM&quot;,&quot;shortName&quot;:&quot;CMFN&quot;},{&quot;securityId&quot;:172459,&quot;fullName&quot;:&quot;CLAYMORE EXCHANGE TRD FD TR GUGGEN DEFN EQTY&quot;,&quot;shortName&quot;:&quot;DEF&quot;},{&quot;securityId&quot;:17176,&quot;fullName&quot;:&quot;DIFFUSION PHARMACEUTICALS INC&quot;,&quot;shortName&quot;:&quot;DFFN&quot;},{&quot;securityId&quot;:6665264,&quot;fullName&quot;:&quot;REALITY SHS ETF TR DIVCN DIVD ETF&quot;,&quot;shortName&quot;:&quot;DFND&quot;},{&quot;securityId&quot;:145702,&quot;fullName&quot;:&quot;DUFRY AG&quot;,&quot;shortName&quot;:&quot;DUFN&quot;},{&quot;securityId&quot;:69170,&quot;fullName&quot;:&quot;EFUEL EFN CORPORATION&quot;,&quot;shortName&quot;:&quot;EFLN&quot;},{&quot;securityId&quot;:2218014,&quot;fullName&quot;:&quot;ELEMENT FLEET MANAGEMENT CORP 5125% SUB CONV PIDI UNSEC DEB 30/06/2019 CAD (144&quot;,&quot;shortName&quot;:&quot;EFNCN&quot;},{&quot;securityId&quot;:1723666,&quot;fullName&quot;:&quot;ISHARES TR MSCI FINLAND CAPPED ETF&quot;,&quot;shortName&quot;:&quot;EFNL&quot;},{&quot;securityId&quot;:53425,&quot;fullName&quot;:&quot;ELFUN TRUSTS UNIT CTF&quot;,&quot;shortName&quot;:&quot;ELFNX&quot;},{&quot;securityId&quot;:18208,&quot;fullName&quot;:&quot;EQUITABLE FINANCIAL CORP&quot;,&quot;shortName&quot;:&quot;EQFN&quot;},{&quot;securityId&quot;:1092807,&quot;fullName&quot;:&quot;ISHARES MSCI EUROPE FINANACIALS ETF&quot;,&quot;shortName&quot;:&quot;EUFN&quot;}],&quot;totalCount&quot;:228298}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">C:/Users/Andrii_Tarnovetskyi/Downloads/Microsoft.SkypeApp_kzf8qxf38zg5c!App/All/data.csv</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="variableNames"></stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename">C:/Users/Andrii_Tarnovetskyi/Downloads/Microsoft.SkypeApp_kzf8qxf38zg5c!App/All/Validation.txt</stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import groovy.json.*;
import groovy.json.internal.*;
Boolean requestSucceeded=false;
String assertionExceptionMessage = &quot;&quot;;


String arr = vars.get(&quot;FullName22&quot;);

def jsonSlurper = new JsonSlurper();
def response = jsonSlurper.parseText(prev.getResponseDataAsString());
def getApplicationById = {fullName -&gt; response.data.find{fullName == it.fullName}};



try{
	if(response.data.isEmpty()){
		throw e;
		}
	}catch(Exception e){
		requestSucceeded=true;
		assertionExceptionMessage =  assertionExceptionMessage +  &quot;Array is empty&quot;; 	
		}
	try{
		if( arr == null){
			throw e;
		}
		if( arr.isEmpty()){
			throw e;
		}
			}	
		catch(Exception e){
		requestSucceeded=true;
		assertionExceptionMessage =  assertionExceptionMessage +  &quot;Your variable is empty &quot;; 	
		}	
	try{
		if(response.data.fullName[0] != null &amp;&amp; response.data.securityId[0] != null){
		}else{
			throw NullPointerException;
			}
		}catch(NullPointerException ){
			requestSucceeded=true;
			assertionExceptionMessage =  assertionExceptionMessage + &quot;JSON doesn`t have this element &quot;; 	
			}	

		

try{
	Object emptyMap = getApplicationById(arr);	
	def json2 = new JsonBuilder(emptyMap);	
	if( !(json2 instanceof JsonBuilder) ){
				throw e;
				}
	vars.put(&quot;firstName&quot;, json2.toPrettyString());	
			}catch(Exception e){
				requestSucceeded=true;
				assertionExceptionMessage = assertionExceptionMessage + &quot;Your object is not converted to JSON object&quot;; 	
				}
		
	
if(requestSucceeded)
{
//	log.error(assertionExceptionMessage);
	vars.put(&quot;AssertionActivate&quot;, &quot;true&quot;);
	vars.put(&quot;AssertionExceptionMessage&quot;, assertionExceptionMessage);
}
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">${firstName}</stringProp>
            <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.jmeter.config.Argument;
import org.apache.jmeter.config.Arguments;
import java.net.URLEncoder;
import java.net.URLDecoder;

String assertionActivateString=vars.get(&quot;AssertionActivate&quot;);
String exceptionMessage=vars.get(&quot;AssertionExceptionMessage&quot;);


if (assertionActivateString!=null)
{
	if (assertionActivateString.equals(&quot;true&quot;))
	{		
		String message=&quot;WARNING: &quot;+exceptionMessage;
		AssertionResult.setFailure(true);
		AssertionResult.setFailureMessage(message);		
		vars.put(&quot;AssertionActivate&quot;,&quot;false&quot;);		
	}

}
else
{
	vars.put(&quot;AssertionActivate&quot;,&quot;false&quot;);	
}</stringProp>
        </JSR223Assertion>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
