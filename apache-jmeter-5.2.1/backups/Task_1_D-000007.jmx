<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="MyFirstSteps" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="FULL_NAME" elementType="Argument">
              <stringProp name="Argument.name">FULL_NAME</stringProp>
              <stringProp name="Argument.value">ACORN ENERGY INC</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Request_1" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">{&quot;data&quot;:[{&quot;securityId&quot;:164864,&quot;fullName&quot;:&quot;ACORN ENERGY INC&quot;,&quot;shortName&quot;:&quot;ACFN&quot;},{&quot;securityId&quot;:219813,&quot;fullName&quot;:&quot;AFFINITY NETWORKS INC&quot;,&quot;shortName&quot;:&quot;AFFN&quot;},{&quot;securityId&quot;:2102,&quot;fullName&quot;:&quot;AG GROWTH INTERNATIONAL INC&quot;,&quot;shortName&quot;:&quot;AFN&quot;},{&quot;securityId&quot;:2639622,&quot;fullName&quot;:&quot;AH MTG ADV TR 2011-1 VFNTS&quot;,&quot;shortName&quot;:&quot;AHMAT&quot;},{&quot;securityId&quot;:2639953,&quot;fullName&quot;:&quot;ALESCO PREF FDG XI 2006-11 A-1B FN 144A&quot;,&quot;shortName&quot;:&quot;ALESC&quot;},{&quot;securityId&quot;:2575276,&quot;fullName&quot;:&quot;BABCOCK&amp; BROWN AIR FNDG 2007-1 G-1&quot;,&quot;shortName&quot;:&quot;BBAIR&quot;},{&quot;securityId&quot;:55574,&quot;fullName&quot;:&quot;BANK FIRST NATIONAL CORPORATION (WI)&quot;,&quot;shortName&quot;:&quot;BFNC&quot;},{&quot;securityId&quot;:48652,&quot;fullName&quot;:&quot;CCFNB BANCORP INC&quot;,&quot;shortName&quot;:&quot;CCFN&quot;},{&quot;securityId&quot;:120008,&quot;fullName&quot;:&quot;CAPITOL FEDERAL FINANCIAL INC&quot;,&quot;shortName&quot;:&quot;CFFN&quot;},{&quot;securityId&quot;:2137463,&quot;fullName&quot;:&quot;CM FINANCE INC COM&quot;,&quot;shortName&quot;:&quot;CMFN&quot;},{&quot;securityId&quot;:172459,&quot;fullName&quot;:&quot;CLAYMORE EXCHANGE TRD FD TR GUGGEN DEFN EQTY&quot;,&quot;shortName&quot;:&quot;DEF&quot;},{&quot;securityId&quot;:17176,&quot;fullName&quot;:&quot;DIFFUSION PHARMACEUTICALS INC&quot;,&quot;shortName&quot;:&quot;DFFN&quot;},{&quot;securityId&quot;:6665264,&quot;fullName&quot;:&quot;REALITY SHS ETF TR DIVCN DIVD ETF&quot;,&quot;shortName&quot;:&quot;DFND&quot;},{&quot;securityId&quot;:145702,&quot;fullName&quot;:&quot;DUFRY AG&quot;,&quot;shortName&quot;:&quot;DUFN&quot;},{&quot;securityId&quot;:69170,&quot;fullName&quot;:&quot;EFUEL EFN CORPORATION&quot;,&quot;shortName&quot;:&quot;EFLN&quot;},{&quot;securityId&quot;:2218014,&quot;fullName&quot;:&quot;ELEMENT FLEET MANAGEMENT CORP 5125% SUB CONV PIDI UNSEC DEB 30/06/2019 CAD (144&quot;,&quot;shortName&quot;:&quot;EFNCN&quot;},{&quot;securityId&quot;:1723666,&quot;fullName&quot;:&quot;ISHARES TR MSCI FINLAND CAPPED ETF&quot;,&quot;shortName&quot;:&quot;EFNL&quot;},{&quot;securityId&quot;:53425,&quot;fullName&quot;:&quot;ELFUN TRUSTS UNIT CTF&quot;,&quot;shortName&quot;:&quot;ELFNX&quot;},{&quot;securityId&quot;:18208,&quot;fullName&quot;:&quot;EQUITABLE FINANCIAL CORP&quot;,&quot;shortName&quot;:&quot;EQFN&quot;},{&quot;securityId&quot;:1092807,&quot;fullName&quot;:&quot;ISHARES MSCI EUROPE FINANACIALS ETF&quot;,&quot;shortName&quot;:&quot;EUFN&quot;}],&quot;totalCount&quot;:228298}</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters">RequestBody</stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import net.minidev.json.parser.JSONParser;
import net.minidev.json.JSONObject;
import net.minidev.json.JSONArray;
import org.apache.commons.lang3.Stringutils;


JSONParser parser = new JSONParser(JSONParser.MODE_PERMISSIVE);
JSONObject response=(JSONObject) parser.parse(prev.getResponseDataAsString());
JSONArray arr = (JSONArray)response.get(&quot;data&quot;);



int securityId;
String count_records = arr.size().toString();
log.info(count_records);
assert ${FULL_NAME}.equals(NULL);
for(Object member : arr)
{	
      if(member.get(&quot;fullName&quot;).equals(&quot;${FULL_NAME}&quot;))
      
      {
	      securityId = member.get(&quot;securityId&quot;);   
	      break;
      }
      
}

JSONObject requestJS = new JSONObject();
requestJS.put(&quot;securityId&quot;, securityId);
String request2 = requestJS.toJSONString();
vars.put(&quot;RequestBody&quot;,request2);

       </stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters">RequestBody</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.*
def jsonSlurper = new JsonSlurper();
def response = jsonSlurper.parseText(prev.getResponseDataAsString());
def getApplicationById = {fullName -&gt; response.data.find{fullName == it.fullName}}
Object getText = getApplicationById(&quot;ACORN ENERGY INC&quot;);
def build =  new JsonBuilder([&quot;fullName&quot; : getText.fullName, &quot;SecurityId&quot; : getText.securityId]);
vars.put(&quot;RequestBody&quot;, build.toPrettyString());</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Request_2" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">${RequestBody}</stringProp>
          <stringProp name="RESPONSE_DATA"></stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
        <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Error Handler" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import org.apache.jmeter.config.Argument;
import org.apache.jmeter.config.Arguments;
import java.net.URLEncoder;
import java.net.URLDecoder;

String assertionActivateString=vars.get(&quot;AssertionActivate&quot;);
String exceptionMessage=vars.get(&quot;AssertionExceptionMessage&quot;);


if (assertionActivateString!=null)
{
	if (assertionActivateString.equals(&quot;true&quot;))
	{		
		String message=&quot;WARNING: &quot;+exceptionMessage;
		AssertionResult.setFailure(true);
		AssertionResult.setFailureMessage(message);		
		vars.put(&quot;AssertionActivate&quot;,&quot;false&quot;);		
	}

}
else
{
	vars.put(&quot;AssertionActivate&quot;,&quot;false&quot;);	
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Assertion>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
